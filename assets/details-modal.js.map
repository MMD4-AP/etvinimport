{"version":3,"sources":["details-modal.js"],"names":["DetailsModal","HTMLElement","[object Object]","super","this","detailsContainer","querySelector","summaryToggle","addEventListener","event","code","toUpperCase","close","onSummaryClick","bind","setAttribute","hasAttribute","preventDefault","target","closest","open","contains","classList","onBodyClickEvent","onBodyClick","document","body","add","trapFocus","focusToggle","removeTrapFocus","removeAttribute","removeEventListener","remove","customElements","define"],"mappings":"AAAA,MAAMA,qBAAqBC,YACzBC,cACEC,QACAC,KAAKC,iBAAmBD,KAAKE,cAAc,WAC3CF,KAAKG,cAAgBH,KAAKE,cAAc,WAExCF,KAAKC,iBAAiBG,iBACpB,QACCC,GAAuC,WAA7BA,EAAMC,KAAKC,eAA8BP,KAAKQ,SAE3DR,KAAKG,cAAcC,iBACjB,QACAJ,KAAKS,eAAeC,KAAKV,OAE3BA,KAAKE,cAAc,yBAAyBE,iBAC1C,QACAJ,KAAKQ,MAAME,KAAKV,OAGlBA,KAAKG,cAAcQ,aAAa,OAAQ,UAG1Cb,SACE,OAAOE,KAAKC,iBAAiBW,aAAa,QAG5Cd,eAAeO,GACbA,EAAMQ,iBACNR,EAAMS,OAAOC,QAAQ,WAAWH,aAAa,QACzCZ,KAAKQ,QACLR,KAAKgB,KAAKX,GAGhBP,YAAYO,GACLL,KAAKiB,SAASZ,EAAMS,UAAWT,EAAMS,OAAOI,UAAUD,SAAS,kBAAkBjB,KAAKQ,OAAM,GAGnGV,KAAKO,GACHL,KAAKmB,iBACHnB,KAAKmB,kBAAoBnB,KAAKoB,YAAYV,KAAKV,MACjDK,EAAMS,OAAOC,QAAQ,WAAWJ,aAAa,QAAQ,GACrDU,SAASC,KAAKlB,iBAAiB,QAASJ,KAAKmB,kBAC7CE,SAASC,KAAKJ,UAAUK,IAAI,mBAE5BC,UACExB,KAAKC,iBAAiBC,cAAc,mBACpCF,KAAKC,iBAAiBC,cAAc,+BAIxCJ,MAAM2B,GAAc,GAClBC,gBAAgBD,EAAczB,KAAKG,cAAgB,MACnDH,KAAKC,iBAAiB0B,gBAAgB,QACtCN,SAASC,KAAKM,oBAAoB,QAAS5B,KAAKmB,kBAChDE,SAASC,KAAKJ,UAAUW,OAAO,oBAInCC,eAAeC,OAAO,gBAAiBnC","file":"details-modal.js","sourcesContent":["class DetailsModal extends HTMLElement {\n  constructor() {\n    super();\n    this.detailsContainer = this.querySelector('details');\n    this.summaryToggle = this.querySelector('summary');\n\n    this.detailsContainer.addEventListener(\n      'keyup',\n      (event) => event.code.toUpperCase() === 'ESCAPE' && this.close()\n    );\n    this.summaryToggle.addEventListener(\n      'click',\n      this.onSummaryClick.bind(this)\n    );\n    this.querySelector('button[type=\"button\"]').addEventListener(\n      'click',\n      this.close.bind(this)\n    );\n\n    this.summaryToggle.setAttribute('role', 'button');\n  }\n\n  isOpen() {\n    return this.detailsContainer.hasAttribute('open');\n  }\n\n  onSummaryClick(event) {\n    event.preventDefault();\n    event.target.closest('details').hasAttribute('open')\n      ? this.close()\n      : this.open(event);\n  }\n\n  onBodyClick(event) {\n    if (!this.contains(event.target) || event.target.classList.contains('modal-overlay')) this.close(false);\n  }\n\n  open(event) {\n    this.onBodyClickEvent =\n      this.onBodyClickEvent || this.onBodyClick.bind(this);\n    event.target.closest('details').setAttribute('open', true);\n    document.body.addEventListener('click', this.onBodyClickEvent);\n    document.body.classList.add('overflow-hidden');\n\n    trapFocus(\n      this.detailsContainer.querySelector('[tabindex=\"-1\"]'),\n      this.detailsContainer.querySelector('input:not([type=\"hidden\"])')\n    );\n  }\n\n  close(focusToggle = true) {\n    removeTrapFocus(focusToggle ? this.summaryToggle : null);\n    this.detailsContainer.removeAttribute('open');\n    document.body.removeEventListener('click', this.onBodyClickEvent);\n    document.body.classList.remove('overflow-hidden');\n  }\n}\n\ncustomElements.define('details-modal', DetailsModal);\n"]}