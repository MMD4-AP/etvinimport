{"version":3,"sources":["product-form.js"],"names":["customElements","get","define","HTMLElement","[object Object]","super","this","form","querySelector","disabled","addEventListener","onSubmitHandler","bind","cartNotification","document","evt","preventDefault","submitButton","classList","contains","handleErrorMessage","setActiveElement","activeElement","setAttribute","add","remove","config","fetchConfig","headers","formData","FormData","append","getSectionsToRender","map","section","id","window","location","pathname","body","fetch","routes","cart_add_url","then","response","json","status","description","renderContents","catch","e","console","error","finally","removeAttribute","errorMessage","errorMessageWrapper","toggleAttribute","textContent"],"mappings":"AAAKA,eAAeC,IAAI,iBACtBD,eAAeE,OAAO,eAAgB,cAA0BC,YAC9DC,cACEC,QAEAC,KAAKC,KAAOD,KAAKE,cAAc,QAC/BF,KAAKC,KAAKC,cAAc,aAAaC,UAAW,EAChDH,KAAKC,KAAKG,iBAAiB,SAAUJ,KAAKK,gBAAgBC,KAAKN,OAC/DA,KAAKO,iBAAmBC,SAASN,cAAc,qBAGjDJ,gBAAgBW,GACdA,EAAIC,iBACJ,MAAMC,EAAeX,KAAKE,cAAc,mBACxC,GAAIS,EAAaC,UAAUC,SAAS,WAAY,OAEhDb,KAAKc,qBACLd,KAAKO,iBAAiBQ,iBAAiBP,SAASQ,eAEhDL,EAAaM,aAAa,iBAAiB,GAC3CN,EAAaC,UAAUM,IAAI,WAC3BlB,KAAKE,cAAc,6BAA6BU,UAAUO,OAAO,UAEjE,MAAMC,EAASC,YAAY,cAC3BD,EAAOE,QAAQ,oBAAsB,wBAC9BF,EAAOE,QAAQ,gBAEtB,MAAMC,EAAW,IAAIC,SAASxB,KAAKC,MACnCsB,EAASE,OAAO,WAAYzB,KAAKO,iBAAiBmB,sBAAsBC,IAAKC,GAAYA,EAAQC,KACjGN,EAASE,OAAO,eAAgBK,OAAOC,SAASC,UAChDZ,EAAOa,KAAOV,EAEdW,MAAM,GAAGC,OAAOC,aAAgBhB,GAC7BiB,KAAMC,GAAaA,EAASC,QAC5BF,KAAMC,IACDA,EAASE,OACXxC,KAAKc,mBAAmBwB,EAASG,aAInCzC,KAAKO,iBAAiBmC,eAAeJ,KAEtCK,MAAOC,IACNC,QAAQC,MAAMF,KAEfG,QAAQ,KACPpC,EAAaC,UAAUO,OAAO,WAC9BR,EAAaqC,gBAAgB,iBAC7BhD,KAAKE,cAAc,6BAA6BU,UAAUM,IAAI,YAIpEpB,mBAAmBmD,GAAe,GAChCjD,KAAKkD,oBAAsBlD,KAAKkD,qBAAuBlD,KAAKE,cAAc,wCAC1EF,KAAKiD,aAAejD,KAAKiD,cAAgBjD,KAAKkD,oBAAoBhD,cAAc,gCAEhFF,KAAKkD,oBAAoBC,gBAAgB,UAAWF,GAEhDA,IACFjD,KAAKiD,aAAaG,YAAcH","file":"product-form.js","sourcesContent":["if (!customElements.get('product-form')) {\n  customElements.define('product-form', class ProductForm extends HTMLElement {\n    constructor() {\n      super();\n\n      this.form = this.querySelector('form');\n      this.form.querySelector('[name=id]').disabled = false;\n      this.form.addEventListener('submit', this.onSubmitHandler.bind(this));\n      this.cartNotification = document.querySelector('cart-notification');\n    }\n\n    onSubmitHandler(evt) {\n      evt.preventDefault();\n      const submitButton = this.querySelector('[type=\"submit\"]');\n      if (submitButton.classList.contains('loading')) return;\n\n      this.handleErrorMessage();\n      this.cartNotification.setActiveElement(document.activeElement);\n\n      submitButton.setAttribute('aria-disabled', true);\n      submitButton.classList.add('loading');\n      this.querySelector('.loading-overlay__spinner').classList.remove('hidden');\n\n      const config = fetchConfig('javascript');\n      config.headers['X-Requested-With'] = 'XMLHttpRequest';\n      delete config.headers['Content-Type'];\n\n      const formData = new FormData(this.form);\n      formData.append('sections', this.cartNotification.getSectionsToRender().map((section) => section.id));\n      formData.append('sections_url', window.location.pathname);\n      config.body = formData;\n\n      fetch(`${routes.cart_add_url}`, config)\n        .then((response) => response.json())\n        .then((response) => {\n          if (response.status) {\n            this.handleErrorMessage(response.description);\n            return;\n          }\n\n          this.cartNotification.renderContents(response);\n        })\n        .catch((e) => {\n          console.error(e);\n        })\n        .finally(() => {\n          submitButton.classList.remove('loading');\n          submitButton.removeAttribute('aria-disabled');\n          this.querySelector('.loading-overlay__spinner').classList.add('hidden');\n        });\n    }\n\n    handleErrorMessage(errorMessage = false) {\n      this.errorMessageWrapper = this.errorMessageWrapper || this.querySelector('.product-form__error-message-wrapper');\n      this.errorMessage = this.errorMessage || this.errorMessageWrapper.querySelector('.product-form__error-message');\n\n      this.errorMessageWrapper.toggleAttribute('hidden', !errorMessage);\n\n      if (errorMessage) {\n        this.errorMessage.textContent = errorMessage;\n      }\n    }\n  });\n}\n"]}