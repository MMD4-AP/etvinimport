{"version":3,"sources":["cart.js"],"names":["CartRemoveButton","HTMLElement","[object Object]","super","this","addEventListener","event","preventDefault","closest","updateQuantity","dataset","index","customElements","define","CartItems","lineItemStatusElement","document","getElementById","currentItemCount","Array","from","querySelectorAll","reduce","total","quantityInput","parseInt","value","debouncedOnChange","debounce","onChange","bind","target","activeElement","getAttribute","id","section","selector","line","quantity","name","enableLoading","body","JSON","stringify","sections","getSectionsToRender","map","sections_url","window","location","pathname","fetch","routes","cart_change_url","fetchConfig","then","response","text","state","parsedState","parse","classList","toggle","item_count","cartFooter","forEach","querySelector","innerHTML","getSectionInnerHTML","updateLiveRegions","lineItem","focus","disableLoading","catch","overlay","add","textContent","cartStrings","error","itemCount","quantityError","replace","setAttribute","cartStatus","setTimeout","html","DOMParser","parseFromString","remove","blur"],"mappings":"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","file":"cart.js","sourcesContent":["class CartRemoveButton extends HTMLElement {\n  constructor() {\n    super();\n    this.addEventListener('click', (event) => {\n      event.preventDefault();\n      this.closest('cart-items').updateQuantity(this.dataset.index, 0);\n    });\n  }\n}\n\ncustomElements.define('cart-remove-button', CartRemoveButton);\n\nclass CartItems extends HTMLElement {\n  constructor() {\n    super();\n\n    this.lineItemStatusElement = document.getElementById('shopping-cart-line-item-status');\n\n    this.currentItemCount = Array.from(this.querySelectorAll('[name=\"updates[]\"]'))\n      .reduce((total, quantityInput) => total + parseInt(quantityInput.value), 0);\n\n    this.debouncedOnChange = debounce((event) => {\n      this.onChange(event);\n    }, 300);\n\n    this.addEventListener('change', this.debouncedOnChange.bind(this));\n  }\n\n  onChange(event) {\n    this.updateQuantity(event.target.dataset.index, event.target.value, document.activeElement.getAttribute('name'));\n  }\n\n  getSectionsToRender() {\n    return [\n      {\n        id: 'main-cart-items',\n        section: document.getElementById('main-cart-items').dataset.id,\n        selector: '.js-contents',\n      },\n      {\n        id: 'cart-icon-bubble',\n        section: 'cart-icon-bubble',\n        selector: '.shopify-section'\n      },\n      {\n        id: 'cart-live-region-text',\n        section: 'cart-live-region-text',\n        selector: '.shopify-section'\n      },\n      {\n        id: 'main-cart-footer',\n        section: document.getElementById('main-cart-footer').dataset.id,\n        selector: '.js-contents',\n      }\n    ];\n  }\n\n  updateQuantity(line, quantity, name) {\n    this.enableLoading(line);\n\n    const body = JSON.stringify({\n      line,\n      quantity,\n      sections: this.getSectionsToRender().map((section) => section.section),\n      sections_url: window.location.pathname\n    });\n\n    fetch(`${routes.cart_change_url}`, {...fetchConfig(), ...{ body }})\n      .then((response) => {\n        return response.text();\n      })\n      .then((state) => {\n        const parsedState = JSON.parse(state);\n        this.classList.toggle('is-empty', parsedState.item_count === 0);\n        const cartFooter = document.getElementById('main-cart-footer');\n\n        if (cartFooter) cartFooter.classList.toggle('is-empty', parsedState.item_count === 0);\n\n        this.getSectionsToRender().forEach((section => {\n          const elementToReplace =\n            document.getElementById(section.id).querySelector(section.selector) || document.getElementById(section.id);\n\n          elementToReplace.innerHTML =\n            this.getSectionInnerHTML(parsedState.sections[section.section], section.selector);\n        }));\n\n        this.updateLiveRegions(line, parsedState.item_count);\n        const lineItem =  document.getElementById(`CartItem-${line}`);\n        if (lineItem && lineItem.querySelector(`[name=\"${name}\"]`)) lineItem.querySelector(`[name=\"${name}\"]`).focus();\n        this.disableLoading();\n      }).catch(() => {\n        this.querySelectorAll('.loading-overlay').forEach((overlay) => overlay.classList.add('hidden'));\n        document.getElementById('cart-errors').textContent = window.cartStrings.error;\n        this.disableLoading();\n      });\n  }\n\n  updateLiveRegions(line, itemCount) {\n    if (this.currentItemCount === itemCount) {\n      document.getElementById(`Line-item-error-${line}`)\n        .querySelector('.cart-item__error-text')\n        .innerHTML = window.cartStrings.quantityError.replace(\n          '[quantity]',\n          document.getElementById(`Quantity-${line}`).value\n        );\n    }\n\n    this.currentItemCount = itemCount;\n    this.lineItemStatusElement.setAttribute('aria-hidden', true);\n\n    const cartStatus = document.getElementById('cart-live-region-text');\n    cartStatus.setAttribute('aria-hidden', false);\n\n    setTimeout(() => {\n      cartStatus.setAttribute('aria-hidden', true);\n    }, 1000);\n  }\n\n  getSectionInnerHTML(html, selector) {\n    return new DOMParser()\n      .parseFromString(html, 'text/html')\n      .querySelector(selector).innerHTML;\n  }\n\n  enableLoading(line) {\n    document.getElementById('main-cart-items').classList.add('cart__items--disabled');\n    this.querySelectorAll(`#CartItem-${line} .loading-overlay`).forEach((overlay) => overlay.classList.remove('hidden'));\n    document.activeElement.blur();\n    this.lineItemStatusElement.setAttribute('aria-hidden', false);\n  }\n\n  disableLoading() {\n    document.getElementById('main-cart-items').classList.remove('cart__items--disabled');\n  }\n}\n\ncustomElements.define('cart-items', CartItems);\n"]}