{{ 'section-guide.css' | asset_url | stylesheet_tag }}

<div id="app">
    <template v-if="allProducts">
        <div>
            <h2 v-text="guideTitle"></h2>
            <p v-text="guideDescription"></p>

            <div>
                <h3 v-text="getCurrentQuestion.question"></h3>
                <div class="options">
                    <label v-for="(option, index) in getCurrentQuestion.options" :key="index" :class="getCurrentQuestion.selected != null && index != getCurrentQuestion.selected ? 'disabled' : ''">
                        <input type="radio" :value="index" :disabled="getCurrentQuestion.selected">
                        <span v-text="option" @click="addToUserOptions(option); nextQuestion();"></span>
                    </label>
                </div>
            </div>

            <p v-text="userOptions"></p>
            <div v-if="quizCompleted">
                <h4>Anbefalinger:</h4>
                <div>
                    <ul>
                        <li v-for="(result, index) in results" :key="index">
                            <span v-text="result.title"></span>
                        </li>
                    </ul>
                    <button @click="startOver()">Start forfra</button>
                </div>
            </div>
        </div>
    </template>
</div>
<script src="https://unpkg.com/vue@3"></script>

<script>
    const options = {
        name: "CollectionsApp",
        data() {
            return {
                allProducts: null,
                guideTitle: "{{ section.settings.guide_title }}",
                guideDescription: "{{ section.settings.guide_description }}",
                fetch_url: window.location.href + "/collections/all?view=json",
                tags: [],
                filters: [],
                type: "",
                selectedTaste: null,
                searchQuery: null,
                questions:[{% for block in section.blocks %}{% case block.type %}{% when 'question' %}
                        {
                            question: "{{ block.settings.question_title }}",
                            answer: {{ forloop.index0 }},
                            options: [
                                {{ block.settings.answers }}
                            ], 
                            selected: null,
                            questionNumber: {{ forloop.index0 }}
                        }{% endcase %}{% unless forloop.last %},{% endunless %}{% endfor %}
                ],
                quizCompleted: false,
                currentQuestion: 0,
                userOptions: [],
                results: null
            }
        },
        methods: {
            async getProducts() {
                await fetch(this.fetch_url, {
                    mode: 'no-cors'
                })
                .then(res => res.json())
                .then(data => {
                    this.allProducts = data.products
                    this.tags = data.tags
                    this.filters = data.filters
                })
            },
            nextQuestion() {
                if(this.currentQuestion < this.questions.length - 1) {
                    this.currentQuestion++
                } else {
                    this.quizCompleted = true
                    this.filteredProducts()
                }
            },
            addToUserOptions(option) {
                this.userOptions.push(option);
            },
            filteredProducts() {
                const searchFilters = this.filters;
                const searchParams = this.userOptions;
                
                this.results = this.allProducts.filter((item) =>
                    searchFilters.some((a) => searchParams.includes(item[a]))
                );
            },
            startOver() {
                this.currentQuestion = 0
                this.userOptions = []
                this.results = null
                this.quizCompleted = false
            }
        },
        created() {
            this.getProducts();
        },
        computed: {
            getCurrentQuestion() {
                let question = this.questions[this.currentQuestion]
                question.index = this.currentQuestion
                return question
            }
        }
    }
    const CollectionsApp = Vue.createApp(options).mount('#app');
</script>




{% comment %}
fetch_url: window.location.href + "/collections/all?view=json",
fetch_url: "https://www.etvinimport.dk/collections/all?view=json",

{% for block in section.blocks %}  
    {% case block.type %}
    {% when 'question' %}  
        <div class="link" {{ block.shopify_attributes }}>   
            {{ block.settings.question_title }}
        </div> 
    {% endcase %} 
{% endfor %}


 [{% for block in section.blocks %}{% case block.type %}{% when 'question' %}
    {
        "{{ block.settings.question_title }}"
    }{% endcase %}{% unless forloop.last %},{% endunless %}{% endfor %}
    ]

            <div>
            <input v-model="searchQuery" type="text" placeholder="Portvin">
            <label v-for="(tag, index) in tags" :key="index">
                <input type="radio" :value="tag" v-model="selectedTaste">
                    <span v-text="tag"></span>
                </input>
            </label>
            <label v-for="(question, index) in questions" :key="index">
                <input type="radio" :value="question">
                    <span v-text="question"></span>
                </input>
            </label>
            <ul class="grid product-grid">
                <li class="grid__item" v-for="resultProduct in resultQuery" :key="resultProduct.id">
                   <h4 v-html="resultProduct.title"></h4>
                   <img :src="resultProduct.featured_image" alt="" />
                   <a :href="resultProduct.url">Køb</a>
                </li>
            </ul>
            <hr>
        </div>
{% endcomment %}

{% schema %}
{
    "name":"Guide",
    "settings": [
        {
            "type":"header",
            "content":"Titel på guide"
        },
        {
            "type":"text",
            "id":"guide_title",
            "default":"Vinguide",
            "label":"Vinguide"
        },
        {
            "type":"header",
            "content":"Titel på guide"
        },
        {
            "type":"paragraph",
            "content":"Lav en passende beskrivelse af guiden."
        },
        {
            "type":"textarea",
            "id":"guide_description",
            "default":"Dette er en vinguide",
            "label":"Dette er en vinfuide"
        }
    ],
    "blocks":[
       {
          "type":"question",
          "name":"spørgsmål",
          "settings":[
             {
                "type":"header",
                "content":"Spørgsmål"
             },
             {
                "type":"text",
                "id":"question_title",
                "default":"Skriv spørgsmålet",
                "label":"Spørgsmål"
             },
             {
                "type":"paragraph",
                "content":"Skriv svarene på spørgsmålet nedenfor. Svar skal skrives for stort forbogstav og i anførselsteng ('') efterfulgt af et komma. Eks: 'Hvid', 'Mousserende', 'Portvin'"
             },
             {
                "type":"textarea",
                "id":"answers",
                "default":"'Hvid', 'Mousserende', 'Portvin'",
                "label":"Svar"
             }
          ]
       }
    ],
    "presets":[
       {
          "name":"Spørgsmål",
          "blocks":[
             {
                "type":"question"
             },
             {
                "type":"question"
             },
             {
                "type":"question"
             }
          ]
       }
    ]
 }
{% endschema %}